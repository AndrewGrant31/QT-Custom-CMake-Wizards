cmake_minimum_required(VERSION 3.5)

project(testing_%{ProjectName} LANGUAGES CXX)

enable_testing()

find_package(Threads REQUIRED)

if ($ENV{GOOGLETEST_DIR})
    set(GOOGLETEST_DIR $ENV{GOOGLETEST_DIR})
else ()
    if ("GOOGLETEST_DIR" STREQUAL "")
        message(WARNING "Using googletest src dir specified in the Qt Creator wizard")
    endif ()
    set(GOOGLETEST_DIR "%{GoogleTestFramework}")
endif ()
if (EXISTS ${GOOGLETEST_DIR})
    set(GTestSrc ${GOOGLETEST_DIR}/googletest)
    set(GMockSrc ${GOOGLETEST_DIR}/googlemock)
elseif (UNIX AND EXISTS /usr/src/gtest)
    set(GTestSrc /usr/src/gtest)
    message(WARNING "Using gtest from system")
    if (EXISTS /usr/src/gmock)
        set(GMockSrc /usr/src/gmock)
    endif ()
else ()
    message( FATAL_ERROR "No googletest src dir found - set GOOGLETEST_DIR to enable!")
endif ()

set(GTestFiles ${GTestSrc}/src/gtest-all.cc)
set(GTestIncludes ${GTestSrc} ${GTestSrc}/include)

if (NOT ${GMockSrc} STREQUAL "")
    list(APPEND GTestFiles ${GMockSrc}/src/gmock-all.cc)
    list(APPEND GTestIncludes ${GMockSrc} ${GMockSrc}/include)
endif ()

include_directories(${GTestIncludes})
get_property(FILES_FOR_TESTING GLOBAL PROPERTY GLOBAL_FILES)
get_property(TEST_FILES GLOBAL PROPERTY GLOBAL_TEST_FILES)

# delete and write runtests.h with each new run of cmake
file(WRITE runtests.h "#pragma once")
foreach(FILE ${TEST_FILES})
    file(APPEND runtests.h "\n#include \\"${FILE}\\"")
endforeach()


set(STATUTORY_FILES
    runtests.h
    test_%{ProjectName}.cpp
)

get_filename_component(PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)

set(DIRS  
    @if '%{UsePCH}'
    "${PARENT_DIR}/${CMAKE_PROJECT_NAME}/%{pchHeaderDirectory}"
    @endif
    "${PARENT_DIR}/${CMAKE_PROJECT_NAME}/%{DeclarationDirectory}"
    "${PARENT_DIR}/${CMAKE_PROJECT_NAME}/%{DefinitionDirectory}"
    )

add_executable(${PROJECT_NAME} ${FILES_FOR_TESTING} ${TEST_FILES} ${STATUTORY_FILES} ${GTestFiles})

foreach(DIR "${DIRS}")
    target_include_directories(${PROJECT_NAME} PUBLIC "${DIR}")
endforeach()

add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads)